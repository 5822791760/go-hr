// Code generated by MockGen. DO NOT EDIT.
// Source: internal/backend/repos/author_repo.go
//
// Generated by this command:
//
//	mockgen -source=internal/backend/repos/author_repo.go -destination=test/mocks/mockrepo/mock_author_repo.go -package=mockrepo
//

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	context "context"
	reflect "reflect"

	repos "github.com/5822791760/hr/internal/backend/repos"
	apperr "github.com/5822791760/hr/pkg/apperr"
	gomock "go.uber.org/mock/gomock"
)

// MockIAuthorRepo is a mock of IAuthorRepo interface.
type MockIAuthorRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthorRepoMockRecorder
}

// MockIAuthorRepoMockRecorder is the mock recorder for MockIAuthorRepo.
type MockIAuthorRepoMockRecorder struct {
	mock *MockIAuthorRepo
}

// NewMockIAuthorRepo creates a new mock instance.
func NewMockIAuthorRepo(ctrl *gomock.Controller) *MockIAuthorRepo {
	mock := &MockIAuthorRepo{ctrl: ctrl}
	mock.recorder = &MockIAuthorRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthorRepo) EXPECT() *MockIAuthorRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIAuthorRepo) Delete(ctx context.Context, id int) apperr.Err {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(apperr.Err)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIAuthorRepoMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIAuthorRepo)(nil).Delete), ctx, id)
}

// FindAll mocks base method.
func (m *MockIAuthorRepo) FindAll(ctx context.Context) ([]repos.Author, apperr.Err) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]repos.Author)
	ret1, _ := ret[1].(apperr.Err)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIAuthorRepoMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIAuthorRepo)(nil).FindAll), ctx)
}

// FindOne mocks base method.
func (m *MockIAuthorRepo) FindOne(ctx context.Context, id int) (*repos.Author, apperr.Err) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, id)
	ret0, _ := ret[0].(*repos.Author)
	ret1, _ := ret[1].(apperr.Err)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockIAuthorRepoMockRecorder) FindOne(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockIAuthorRepo)(nil).FindOne), ctx, id)
}

// NameExist mocks base method.
func (m *MockIAuthorRepo) NameExist(ctx context.Context, name string, id int) (bool, apperr.Err) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NameExist", ctx, name, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(apperr.Err)
	return ret0, ret1
}

// NameExist indicates an expected call of NameExist.
func (mr *MockIAuthorRepoMockRecorder) NameExist(ctx, name, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NameExist", reflect.TypeOf((*MockIAuthorRepo)(nil).NameExist), ctx, name, id)
}

// NewAuthor mocks base method.
func (m *MockIAuthorRepo) NewAuthor(name, bio string) *repos.Author {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAuthor", name, bio)
	ret0, _ := ret[0].(*repos.Author)
	return ret0
}

// NewAuthor indicates an expected call of NewAuthor.
func (mr *MockIAuthorRepoMockRecorder) NewAuthor(name, bio any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAuthor", reflect.TypeOf((*MockIAuthorRepo)(nil).NewAuthor), name, bio)
}

// QueryGetAll mocks base method.
func (m *MockIAuthorRepo) QueryGetAll(ctx context.Context) ([]repos.QueryGetAllAuthor, apperr.Err) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryGetAll", ctx)
	ret0, _ := ret[0].([]repos.QueryGetAllAuthor)
	ret1, _ := ret[1].(apperr.Err)
	return ret0, ret1
}

// QueryGetAll indicates an expected call of QueryGetAll.
func (mr *MockIAuthorRepoMockRecorder) QueryGetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryGetAll", reflect.TypeOf((*MockIAuthorRepo)(nil).QueryGetAll), ctx)
}

// Save mocks base method.
func (m *MockIAuthorRepo) Save(ctx context.Context, author *repos.Author) apperr.Err {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, author)
	ret0, _ := ret[0].(apperr.Err)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIAuthorRepoMockRecorder) Save(ctx, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIAuthorRepo)(nil).Save), ctx, author)
}

// Validate mocks base method.
func (m *MockIAuthorRepo) Validate(ctx context.Context, author *repos.Author) apperr.Err {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, author)
	ret0, _ := ret[0].(apperr.Err)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockIAuthorRepoMockRecorder) Validate(ctx, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIAuthorRepo)(nil).Validate), ctx, author)
}
