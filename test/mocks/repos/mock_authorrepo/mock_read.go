// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repos/authorrepo/read.go
//
// Generated by this command:
//
//	mockgen -source=internal/repos/authorrepo/read.go -destination=test/mocks/repos/mock_authorrepo/mock_read.go -package=mock_authorrepo
//

// Package mock_authorrepo is a generated GoMock package.
package mock_authorrepo

import (
	context "context"
	reflect "reflect"

	authorrepo "github.com/5822791760/hr/internal/repos/authorrepo"
	apperr "github.com/5822791760/hr/pkg/apperr"
	gomock "go.uber.org/mock/gomock"
)

// MockIReadRepo is a mock of IReadRepo interface.
type MockIReadRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIReadRepoMockRecorder
}

// MockIReadRepoMockRecorder is the mock recorder for MockIReadRepo.
type MockIReadRepoMockRecorder struct {
	mock *MockIReadRepo
}

// NewMockIReadRepo creates a new mock instance.
func NewMockIReadRepo(ctrl *gomock.Controller) *MockIReadRepo {
	mock := &MockIReadRepo{ctrl: ctrl}
	mock.recorder = &MockIReadRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReadRepo) EXPECT() *MockIReadRepoMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockIReadRepo) FindAll(ctx context.Context) ([]authorrepo.Author, apperr.Err) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]authorrepo.Author)
	ret1, _ := ret[1].(apperr.Err)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIReadRepoMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIReadRepo)(nil).FindAll), ctx)
}

// FindOne mocks base method.
func (m *MockIReadRepo) FindOne(ctx context.Context, id int) (*authorrepo.Author, apperr.Err) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, id)
	ret0, _ := ret[0].(*authorrepo.Author)
	ret1, _ := ret[1].(apperr.Err)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockIReadRepoMockRecorder) FindOne(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockIReadRepo)(nil).FindOne), ctx, id)
}

// NameExist mocks base method.
func (m *MockIReadRepo) NameExist(ctx context.Context, name string, id int) (bool, apperr.Err) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NameExist", ctx, name, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(apperr.Err)
	return ret0, ret1
}

// NameExist indicates an expected call of NameExist.
func (mr *MockIReadRepoMockRecorder) NameExist(ctx, name, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NameExist", reflect.TypeOf((*MockIReadRepo)(nil).NameExist), ctx, name, id)
}

// QueryGetAll mocks base method.
func (m *MockIReadRepo) QueryGetAll(ctx context.Context) ([]authorrepo.QueryAuthorGetAll, apperr.Err) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryGetAll", ctx)
	ret0, _ := ret[0].([]authorrepo.QueryAuthorGetAll)
	ret1, _ := ret[1].(apperr.Err)
	return ret0, ret1
}

// QueryGetAll indicates an expected call of QueryGetAll.
func (mr *MockIReadRepoMockRecorder) QueryGetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryGetAll", reflect.TypeOf((*MockIReadRepo)(nil).QueryGetAll), ctx)
}

// Validate mocks base method.
func (m *MockIReadRepo) Validate(ctx context.Context, author *authorrepo.Author) apperr.Err {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, author)
	ret0, _ := ret[0].(apperr.Err)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockIReadRepoMockRecorder) Validate(ctx, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIReadRepo)(nil).Validate), ctx, author)
}
