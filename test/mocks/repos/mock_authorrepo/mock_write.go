// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repos/authorrepo/write.go
//
// Generated by this command:
//
//	mockgen -source=internal/repos/authorrepo/write.go -destination=test/mocks/repos/mock_authorrepo/mock_write.go -package=mock_authorrepo
//

// Package mock_authorrepo is a generated GoMock package.
package mock_authorrepo

import (
	context "context"
	reflect "reflect"

	authorrepo "github.com/5822791760/hr/internal/repos/authorrepo"
	apperr "github.com/5822791760/hr/pkg/apperr"
	gomock "go.uber.org/mock/gomock"
)

// MockIWriteRepo is a mock of IWriteRepo interface.
type MockIWriteRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIWriteRepoMockRecorder
}

// MockIWriteRepoMockRecorder is the mock recorder for MockIWriteRepo.
type MockIWriteRepoMockRecorder struct {
	mock *MockIWriteRepo
}

// NewMockIWriteRepo creates a new mock instance.
func NewMockIWriteRepo(ctrl *gomock.Controller) *MockIWriteRepo {
	mock := &MockIWriteRepo{ctrl: ctrl}
	mock.recorder = &MockIWriteRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWriteRepo) EXPECT() *MockIWriteRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIWriteRepo) Delete(ctx context.Context, id int) apperr.Err {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(apperr.Err)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIWriteRepoMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIWriteRepo)(nil).Delete), ctx, id)
}

// NewAuthor mocks base method.
func (m *MockIWriteRepo) NewAuthor(name, bio string) *authorrepo.Author {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAuthor", name, bio)
	ret0, _ := ret[0].(*authorrepo.Author)
	return ret0
}

// NewAuthor indicates an expected call of NewAuthor.
func (mr *MockIWriteRepoMockRecorder) NewAuthor(name, bio any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAuthor", reflect.TypeOf((*MockIWriteRepo)(nil).NewAuthor), name, bio)
}

// Save mocks base method.
func (m *MockIWriteRepo) Save(ctx context.Context, author *authorrepo.Author) apperr.Err {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, author)
	ret0, _ := ret[0].(apperr.Err)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIWriteRepoMockRecorder) Save(ctx, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIWriteRepo)(nil).Save), ctx, author)
}
